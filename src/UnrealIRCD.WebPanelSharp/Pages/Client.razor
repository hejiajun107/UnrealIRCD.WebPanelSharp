@page "/Client"
@using Microsoft.Extensions.Options
@using UnrealIRCD.WebPanelSharp.Models
@using UrealIRCD.JPRC.Client
@using UrealIRCD.JPRC.Client.Model
@using UnrealIRCD.WebPanelSharp
@inject ModalService _modalService
@inject IMessageService _message

<PageContainer Title="用户">
    <Content>
        <Search Class="extraContentSearch" Placeholder="请输入..." @bind-Value="_search" OnSearch="LoadData" />
    </Content>
    <ExtraContent>
        <Button Icon="reload" OnClick="Refresh"></Button>
    </ExtraContent>
    <ChildContent>
        <Table TItem="UserClient"
               DataSource="@clients"
               Total="_total"
               Loading = "_loading"
               @bind-PageIndex="_pageIndex"
               @bind-PageSize="_pageSize"
               Size="TableSize.Small"
              >
             <PropertyColumn Property="c=>c.Id" />
             <PropertyColumn Title="昵称" Property="c=>c.Name" />
             <PropertyColumn Property="c=>c.Ip" />
             <PropertyColumn Title="上线时间" Property="c=>c.ConnectedSince">
                 <span>@(context.ConnectedSince.ToLocalTime().ToString("yyyy-MM-dd HH:mm ss"))</span>
             </PropertyColumn>
             <PropertyColumn Title="详细" Property="c=>c.Details" />
            <ActionColumn Title="操作">
                 <Space>
                    <SpaceItem>
                        <Tooltip Placement="@Placement.Top" Title="@("详细")">
                            <Button Type="@ButtonType.Link" Icon="file-search" OnClick="()=>OnDetailClick(context)">
                            </Button>
                        </Tooltip>
                    </SpaceItem>
                    <SpaceItem>
                        <Tooltip Placement="@Placement.Top" Title="@("踢出")">
                            <Button Danger Type="@ButtonType.Link" Icon="user-delete" OnClick="()=>OnKickClick(context)">
                        </Button>
                        </Tooltip>
                    </SpaceItem>
                    <SpaceItem>
                        <Tooltip Placement="@Placement.Top" Title="@("封禁")">
                             <Button Danger Type="@ButtonType.Link" Icon="audio-muted" OnClick="()=>OnBanClick(context)">
                             </Button>
                         </Tooltip>
                    </SpaceItem>
                 </Space>
             </ActionColumn>
         </Table>
    </ChildContent>
</PageContainer>


 @code {

    List<UserClient> clients;
    [Inject] JRPCClient IRCClient { get; set; }

    private ModalRef modalRef = null;

    private string _search;
    bool _loading = false;

    int _pageIndex = 1;
    int _pageSize = 50;
    int _total;

    UserClient detail = new UserClient();
    List<UserClient> histories = new List<UserClient>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        _loading = true;
        var users = await IRCClient.UserApi.List();
        if(!string.IsNullOrWhiteSpace(_search))
        {
            users = users.Where(x => x.Name.Contains(_search) || x.Ip.Contains(_search) || x.Details.Contains(_search)).ToList();
        }
        _total = users.Count();
        clients = users.Skip((_pageIndex - 1) * _pageSize).Take(_pageSize).ToList();
        _loading = false;
    }

    private async Task Refresh()
    {
        await LoadData();
        StateHasChanged();
    }

    private RenderFragment DetailFragment => 
        @<Card>
            <Descriptions Title="基本信息" Style="margin-bottom: 32px;">
                <DescriptionsItem Title="Id">@detail.Id</DescriptionsItem>
                <DescriptionsItem Title="昵称">@detail.Name</DescriptionsItem>
                <DescriptionsItem Title="上线时间">@(detail.ConnectedSince.ToLocalTime().ToString("yyyy-MM-dd HH:mm ss"))</DescriptionsItem>
                <DescriptionsItem Title="详细">@detail.Details</DescriptionsItem>
            </Descriptions>
            <Divider Style="margin-bottom: 32px;" />
            <Descriptions Title="用户信息" Style="margin-bottom: 32px;">
                <DescriptionsItem Title="频道">@(detail.User.Channels is not null ? string.Join(",",detail.User.Channels.Select(x=>x.Name.Substring(1))):"")</DescriptionsItem>
                <DescriptionsItem Title="安全组">@(detail.User.SecurityGroups is not null?string.Join(",",detail.User.SecurityGroups):"")</DescriptionsItem>
                <DescriptionsItem Title="实名">@(detail.User.Realname)</DescriptionsItem>
                <DescriptionsItem Title="名誉">@(detail.User.Reputation)</DescriptionsItem>
            </Descriptions>
            <Divider Style="margin-bottom: 32px;" />
            <Descriptions Title="历史" Style="margin-bottom: 32px;">
              <Timeline>
                @foreach(var history in histories)
                {
                    <TimelineItem>@($"{history.Name}({history.Ip})") <span>Event:@history.Event</span> <span>@history.ConnectedSince</span></TimelineItem>
                }
              </Timeline>
            </Descriptions>
    </Card>;

    private async Task OnDetailClick(UserClient user)
    {
        detail = await IRCClient.UserApi.Get(user.Id) ?? new UserClient();
        histories = await IRCClient.UserApi.WhoWasIP(user.Ip) ?? new List<UserClient>();
        modalRef = await _modalService.CreateModalAsync(new ModalOptions()
        {
                Width = 1000,
                Title = "详情",
                OkText = "确认",
                CancelText = "取消",
                Content = DetailFragment,
                CancelButtonProps = new ButtonProps()
                {
                    Disabled = true
                },
                OnOk = async e => { if (modalRef is not null) { await modalRef.CloseAsync(); } }
        });
    }





    private BanActionPara BanPara = new BanActionPara();

    public async void OnKickClick(UserClient data)
    {
        BanPara.Reason = null;
        modalRef = await _modalService.CreateModalAsync(new ModalOptions()
                {
                    Title = "踢出",
                    OkText = "确认",
                    CancelText = "取消",
                    Content =       
                    @<Form Model="BanPara">
                        <FormItem NoStyle>
                            <LabelTemplate>
                                <label>理由</label>
                            </LabelTemplate>
                            <ChildContent>
                                <Input @bind-Value="context.Reason" Placeholder="请输入踢出的理由" DebounceMilliseconds=1000 />
                            </ChildContent>
                        </FormItem>
                    </Form>
        ,
                OnOk = async e => await Kick(data)
            });
    }

    public async void OnBanClick(UserClient data)
    {
        BanPara.Reason = null;
        BanPara.ExpiredAt = null;
        modalRef = await _modalService.CreateModalAsync(new ModalOptions()
                {
                    Title = "封禁",
                    OkText = "确认",
                    CancelText = "取消",
                    Content =  @<Form Model="BanPara">
                                    <FormItem NoStyle>
                                        <LabelTemplate>
                                            <label>理由</label>
                                        </LabelTemplate>
                                        <ChildContent>
                                            <Input @bind-Value="context.Reason" Placeholder="请输入封禁的理由" DebounceMilliseconds=1000 />
                                        </ChildContent>
                                    </FormItem>
                                    <FormItem NoStyle>
                                        <LabelTemplate>
                                            <label>时间</label>
                                        </LabelTemplate>
                                        <ChildContent>
                                            <DatePicker @bind-Value="context.ExpiredAt" TValue="DateTime?" ShowTime="@true" Format="yyyy-MM-dd HH:mm ss" Placeholder="@("请选择解封时间")"  />
                                        </ChildContent>
                                    </FormItem>
                                </Form>
    ,
            OnOk = async e => await Ban(data)
        }
        );
    }

    public async Task Kick(UserClient data)
    {
        if (string.IsNullOrWhiteSpace(BanPara.Reason))
            BanPara.Reason = "no reason";

        await IRCClient.UserApi.Kill(data.Id, BanPara.Reason);

        if (modalRef is not null)
            await modalRef.CloseAsync();

        await _message.Success("操作成功", 3);
    }

    public async Task Ban(UserClient data)
    {
        if (string.IsNullOrWhiteSpace(BanPara.Reason))
            BanPara.Reason = "no reason";

        await IRCClient.UserApi.Kill(data.Id, BanPara.Reason);
        await IRCClient.ServerApi.BanAdd(data.Name, BanAction.KLINE, BanPara.ExpiredAt ?? DateTime.Now.AddHours(2), BanPara.Reason);

        if (modalRef is not null)
            await modalRef.CloseAsync();

        await _message.Success("操作成功", 3);
    }


}
